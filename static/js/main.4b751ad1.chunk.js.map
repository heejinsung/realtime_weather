{"version":3,"sources":["components/DisplayData.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayData","props","weather","temperature","description","location","region","country","wind_speed","pressure","precip","humidity","img","className","src","alt","Navbar","onSubmit","e","changeWeather","placeholder","onChange","changeRegion","target","value","App","state","coords","latitude","longitude","data","inputData","change","setState","event","preventDefault","Axios","get","then","res","weatherData","current","weather_descriptions","name","weather_icons","navigator","geolocation","getCurrentPosition","position","newCoords","console","log","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b751ad1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DisplayData(props) {\n   //console.log(props.weather);\n   const {temperature, description,location,region,country, wind_speed, pressure,precip,humidity,img} = props.weather;\n   return (\n      <div className=\"user-weather\">\n         <div className=\"row\">\n               <div className=\"col-md-3 weather-temp\">\n                  <h1>{temperature}<sup>o</sup>C , {description}</h1>\n                  <h4>{location}<b>{region} , {country}</b></h4>\n               </div>\n\n               <div className=\"col-md-9\">\n                  <img className=\"mainImg\" src={img} alt=\"weather-img\" />\n               </div>\n         </div>\n\n            <div className=\"row\">\n                <div className=\"col-md-3 weather-info\">\n                    <p><b>Wind Speed</b>(km/hr)</p>\n                    <h2>{wind_speed}</h2>\n                </div>\n\n                <div className=\"col-md-3 weather-info\">\n                    <p><b>Preassure</b>(millibar)</p>\n                    <h2>{pressure}</h2>\n                </div>\n\n                <div className=\"col-md-3 weather-info\">\n                    <p><b>Precipitation</b>(mm)</p>\n                    <h2>{precip}</h2>\n                </div>\n\n                <div className=\"col-md-3 weather-info\">\n                    <p><b>Humidity</b>(%)</p>\n                    <h2>{humidity}</h2>\n                </div>\n\n            </div>\n      </div>\n   );\n}\n\nexport default DisplayData;","import React from 'react';\n\nfunction Navbar(props) {\n   return (\n      <div className=\"row\">\n         <div className=\"col-md-6\">\n            <h1 className=\"title\">Realtime Weather</h1>\n         </div>\n         <div className=\"col-md-6\">\n            <form className=\"region\" onSubmit = {(e) => props.changeWeather(e)}>\n               <input className=\"regioninput\" placeholder=\"Enter Your Location\" onChange={ (e) => {props.changeRegion(e.target.value)}}/>\n            </form>\n         </div>\n\n      </div>\n   )\n}\n\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport DisplayData from './components/DisplayData';\nimport Navbar from './components/Navbar';\n\nclass App extends React.Component {\n\n  state = {\n    coords: {\n      latitude: 37,\n      longitude: 127\n    },\n    data: {},\n    inputData : \"\"\n  }\n\n\n  componentDidMount() {\n    //console.log('render mounted');\n    if (navigator.geolocation) {\n      //console.log('supported'); \n      navigator.geolocation.getCurrentPosition((position) => {\n        //console.log(position.coords.latitude, position.coords.longitude);\n        let newCoords = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        }\n        this.setState({ coords: newCoords });\n        //console.log(this.state.coords);\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=53a4afbcfb574cedee67a6793eb3f542&query=${this.state.coords.latitude},${this.state.coords.longitude}`).then(res => {\n          //console.log(this.state.coords.longitude);\n          let weatherData = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons\n          }\n          this.setState({ data: weatherData });\n        })\n      });\n    } else {\n      console.log('not supported');\n    }\n  }\n\n  change = (value) => {\n    //console.log(value);\n    this.setState({ inputData: value });\n    //console.log(this.state.inputData);\n  }\n\n  changeWeather = (event) => {\n    event.preventDefault();\n    Axios.get(`http://api.weatherstack.com/current?access_key=53a4afbcfb574cedee67a6793eb3f542&query=${this.state.inputData}`).then(res => {\n    //console.log(this.state.coords.longitude);\n    let weatherData = {\n      temperature: res.data.current.temperature,\n      description: res.data.current.weather_descriptions[0],\n      location: res.data.location.name,\n      region: res.data.location.region,\n      country: res.data.location.country,\n      wind_speed: res.data.current.wind_speed,\n      pressure: res.data.current.pressure,\n      precip: res.data.current.precip,\n      humidity: res.data.current.humidity,\n      img: res.data.current.weather_icons\n    }\n    this.setState({ data: weatherData });\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Navbar changeRegion={this.change} changeWeather={this.changeWeather}/>\n          <DisplayData weather={this.state.data} />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}